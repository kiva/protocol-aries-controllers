# Required environment variables (set these in CircleCI):
# DOCKER_LOGIN - Dockerhub service account username
# DOCKER_PASSWORD - Dockerhub service account password

version: 2.1

jobs:
  build-and-test:
    executor:
      name: node/default
      tag: '14.15.1'
    steps:
      - checkout
      - run:
          name: setup and lint FSP
          command: |
            cd implementations/fsp
            npm install
            npm run lint
            npm run build
      - run:
          name: setup and lint Kiva
          command: |
            cd implementations/kiva
            npm install
            npm run lint
            npm run build
      - run:
          name: setup and lint TDC
          command: |
            cd implementations/tdc
            npm install
            npm run lint
            npm run build

  integration-test:
    machine:
      docker_layer_caching: true
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      - run:
          name: Setup shell environment
          command: |
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Setup node
          command: |
              nvm install v14.15.1
              node -v
              nvm alias default v14.15.1
      - run:
          name: Setup implementations
          command: |
            ./scripts/dummy_env.sh
            docker pull bcgovimages/aries-cloudagent:py36-1.16-1_0.7.1
      - run:
          name: Start docker-compose
          command: |
            docker-compose -f docker-compose.ci.yml build
            docker-compose -f docker-compose.ci.yml up -d
            docker-compose -f docker-compose.ci.yml logs
#      - run:
#          name: Setup integration tests
#          command: |
#            cd integration_tests
#            npm install
#      - run:
#          name: Wait for readiness
#          command: |
#            sleep 5
#            ./scripts/healthcheck.sh http://localhost:8081/healthz
#            sleep 30
#            ./scripts/healthcheck.sh http://localhost:3011/healthz
#      - run:
#          name: Run setup scripts
#          command: |
#            if ! ./scripts/prod_setup.sh ; then
#              echo "Setup failed. Server logs:";
#              docker-compose -f docker-compose.ci.yml logs;
#              exit 1;
#            fi
#      - run:
#          name: Running integration tests
#          command: |
#            cd integration_tests
#            if ! npm run test ; then
#              echo "Tests failed. Server logs:";
#              cd ..
#              docker-compose -f docker-compose.ci.yml logs;
#              exit 1;
#            fi

  protocol-integration-tests:
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - run:
          name: Pull protocol-integration-tests
          command: git clone https://github.com/kiva/protocol-integration-tests ./
      - run:
          name: Setup environment
          command: |
            ./scripts/setup_env.sh
            echo $AUTH0_ENV | base64 --decode >> .env
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Node npm setup
          command: |
            nvm install v14.15.1
            node -v
            nvm alias default v14.15.1
      - run:
          name: Get ACAPy
          command: docker pull bcgovimages/aries-cloudagent:py36-1.16-1_0.7.1
      - run:
          name: Override for fsp-controller, kiva-controller, and tdc-controller images
          command: ./scripts/setup_override.sh -r protocol-aries-controllers -s fsp-controller,kiva-controller,tdc-controller -e scripts/dummy_env.sh
      - run:
          name: Start docker compose and wait for readiness
          command: |
            docker system prune -f
            docker-compose -f docker-compose.yml build --no-cache
            docker-compose -f docker-compose.yml up -d
            sleep 20
            docker-compose -f docker-compose.yml logs
      - run:
          name: Healthcheck services
          command: ./scripts/healthstack.sh
      - run:
          name: Setup integration tests
          command: |
            npm install
            ./scripts/setup_fixtures.sh
      - run:
          name: Running integration tests
          command: |
            if ! npm run test ; then
              echo "Tests failed. Server logs:";
              docker-compose -f docker-compose.yml logs;
              exit 1;
            fi

  push-to-dev:
    machine:
      image: ubuntu-2004:202201-02
    parameters:
      tag:
        default: latest
        description: Tag of target services to push to dev
        type: string
      service:
        description: Name of service to push to dev
        type: string
      helm-charts:
        description: Location of the helm charts to be used in this deployment
        type: string
    steps:
      - checkout
      - kube-orb/install
      - kube-orb/install-kubeconfig:
          kubeconfig: KUBECONFIG_BASE64
      - aws-eks/install-aws-iam-authenticator
      - helm/install-helm-client:
          version: v3.2.4
      - run:
          name: Deploy service to dev cloud
          command: helm upgrade --install <<parameters.service>> <<parameters.helm-charts>> --set image.tag=<<parameters.tag>>

workflows:
  build-test-deploy:
    jobs:
      - build-and-test:
          filters: # run for all branches AND tags
              tags:
                  only: /.*/
      - integration-test:
          requires:
            - build-and-test
          filters:
              tags:
                  only: /.*/
#      - protocol-integration-tests:
#          context:
#            - integration-test-context
#          requires:
#            - integration-test
#          filters: # only run for semver tagged versions
#            tags:
#              only: /.*/
      - docker/publish:
          name: docker/publish-fsp-controller
          requires:
              - integration-test
          filters:
            tags:
              only: /.*/
          update-description: true
          docker-context: implementations/fsp
          dockerfile: implementations/fsp/Dockerfile.production
          image: kivaprotocol/fsp-controller
          tag: << pipeline.git.tag >>,latest
      - docker/publish:
          name: docker/publish-kiva-controller
          requires:
            - integration-test
          filters:
            tags:
              only: /.*/
          update-description: true
          docker-context: implementations/kiva
          dockerfile: implementations/kiva/Dockerfile.production
          image: kivaprotocol/kiva-controller
          tag: << pipeline.git.tag >>,latest
      - docker/publish:
          name: docker/publish-tdc-controller
          requires:
              - integration-test
          filters:
            tags:
              only: /.*/
          update-description: true
          docker-context: implementations/tdc
          dockerfile: implementations/tdc/Dockerfile.production
          image: kivaprotocol/tdc-controller
          tag: << pipeline.git.tag >>,latest
#      - push-to-dev:
#          name: push-to-dev-fsp-controller
#          context:
#            - continuous-deployment-dev
#          requires:
#            - docker/publish-fsp-controller
#          filters: # only run for semver tagged versions
#            tags:
#              only: /^([0-9]+)\.([0-9]+)\.([0-9]+)/
#            branches:
#              ignore: /.*/
#          tag: << pipeline.git.tag >>
#          service: fsp-controller
#          helm-charts: implementations/fsp/helm-config
#      - push-to-dev:
#          name: push-to-dev-kiva-controller
#          context:
#            - continuous-deployment-dev
#          requires:
#            - docker/publish-kiva-controller
#          filters: # only run for semver tagged versions
#            tags:
#              only: /^([0-9]+)\.([0-9]+)\.([0-9]+)/
#            branches:
#              ignore: /.*/
#          tag: << pipeline.git.tag >>
#          service: kiva-controller
#          helm-charts: implementations/kiva/helm-config
#      - push-to-dev:
#          name: push-to-dev-tdc-controller
#          context:
#            - continuous-deployment-dev
#          requires:
#            - docker/publish-tdc-controller
#          filters: # only run for semver tagged versions
#            tags:
#              only: /^([0-9]+)\.([0-9]+)\.([0-9]+)/
#            branches:
#              ignore: /.*/
#          tag: << pipeline.git.tag >>
#          service: tdc-controller
#          helm-charts: implementations/tdc/helm-config

orbs:
  node: circleci/node@1.1.6
  docker: circleci/docker@1.3.0
  kube-orb: circleci/kubernetes@0.11.1
  aws-eks: circleci/aws-eks@1.0.1
  helm: circleci/helm@1.2.0
